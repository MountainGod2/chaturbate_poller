from typing import Any

from _typeshed import Incomplete

PY3K: bool
logger: Incomplete
USER_HOME: str
__version__: str

def is_string(data: Any) -> bool: ...
def encodeString(string: str) -> bytes: ...
def decodeString(string: bytes) -> str: ...

class PhueException(Exception):
    id: Incomplete
    message: Incomplete
    def __init__(self, id: int, message: str) -> None: ...

class PhueRegistrationException(PhueException): ...
class PhueRequestTimeout(PhueException): ...

class Light:
    bridge: Incomplete
    light_id: Incomplete
    transitiontime: Incomplete
    def __init__(self, bridge: Bridge, light_id: int) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def on(self) -> bool: ...
    @on.setter
    def on(self, value: bool) -> None: ...
    @property
    def colormode(self) -> str: ...
    @property
    def brightness(self) -> int: ...
    @brightness.setter
    def brightness(self, value: int) -> None: ...
    @property
    def hue(self) -> int: ...
    @hue.setter
    def hue(self, value: int) -> None: ...
    @property
    def saturation(self) -> int: ...
    @saturation.setter
    def saturation(self, value: int) -> None: ...
    @property
    def xy(self) -> list[float]: ...
    @xy.setter
    def xy(self, value: list[float]) -> None: ...
    @property
    def colortemp(self) -> int: ...
    @colortemp.setter
    def colortemp(self, value: int) -> None: ...
    @property
    def colortemp_k(self) -> int: ...
    @colortemp_k.setter
    def colortemp_k(self, value: int) -> None: ...
    @property
    def effect(self) -> str: ...
    @effect.setter
    def effect(self, value: str) -> None: ...
    @property
    def alert(self) -> str: ...
    @alert.setter
    def alert(self, value: str) -> None: ...
    @property
    def reachable(self) -> bool: ...
    @property
    def type(self) -> str: ...

class SensorState(dict[str, Any]):
    def __init__(self, bridge: Bridge, sensor_id: int) -> None: ...
    def __setitem__(self, key: str, value: Any) -> None: ...

class SensorConfig(dict[str, Any]):
    def __init__(self, bridge: Bridge, sensor_id: int) -> None: ...
    def __setitem__(self, key: str, value: Any) -> None: ...

class Sensor:
    bridge: Bridge
    sensor_id: int
    def __init__(self, bridge: Bridge, sensor_id: int) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def modelid(self) -> str: ...
    @property
    def swversion(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def uniqueid(self) -> str: ...
    @property
    def manufacturername(self) -> str: ...
    @property
    def state(self) -> dict[str, Any]: ...
    @state.setter
    def state(self, data: dict[str, Any]) -> None: ...
    @property
    def config(self) -> dict[str, Any]: ...
    @config.setter
    def config(self, data: dict[str, Any]) -> None: ...
    @property
    def recycle(self) -> bool: ...

class Group(Light):
    group_id: int
    def __init__(self, bridge: Bridge, group_id: int) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def lights(self) -> list[str]: ...
    @lights.setter
    def lights(self, value: list[str]) -> None: ...

class AllLights(Group):
    def __init__(self, bridge: Incomplete | None = None) -> None: ...

class Scene:
    scene_id: str
    appdata: dict[str, Any]
    lastupdated: str
    lights: list[str]
    locked: bool
    name: str
    owner: str
    picture: str
    recycle: bool
    version: int
    type: str
    group: str
    def __init__(
        self,
        sid: str,
        appdata: dict[str, Any] | None = None,
        lastupdated: str | None = None,
        lights: list[str] | None = None,
        locked: bool = False,
        name: str = "",
        owner: str = "",
        picture: str = "",
        recycle: bool = False,
        version: int = 0,
        type: str = "",
        group: str = "",
        *args: Any,
        **kwargs: Any,
    ) -> None: ...

class Bridge:
    config_file_path: Incomplete
    ip: Incomplete
    username: Incomplete
    lights_by_id: Incomplete
    lights_by_name: Incomplete
    sensors_by_id: Incomplete
    sensors_by_name: Incomplete
    def __init__(
        self,
        ip: Incomplete | None = None,
        username: Incomplete | None = None,
        config_file_path: Incomplete | None = None,
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    def request(
        self, mode: str = "GET", address: str | None = None, data: dict[str, Any] | None = None
    ) -> dict[str, Any]: ...
    def get_ip_address(self, set_result: bool = False) -> str: ...
    def register_app(self) -> None: ...
    def connect(self) -> None: ...
    def get_light_id_by_name(self, name: str) -> int: ...
    def get_light_objects(self, mode: str = "list") -> list[Light] | dict[str, Light]: ...
    def get_sensor_id_by_name(self, name: str) -> int: ...
    def get_sensor_objects(self, mode: str = "list") -> list[Sensor] | dict[str, Sensor]: ...
    def __getitem__(self, key: str) -> Light: ...
    @property
    def lights(self) -> dict[str, Light]: ...
    def get_api(self) -> dict[str, Any]: ...
    def get_light(
        self, light_id: int | None = None, parameter: str | None = None
    ) -> dict[str, Any]: ...
    def set_light(
        self,
        light_id: int,
        parameter: str | dict[str, Any],
        value: Any | None = None,
        transitiontime: int | None = None,
    ) -> list[dict[str, Any]]: ...
    @property
    def sensors(self) -> dict[str, Sensor]: ...
    def create_sensor(
        self,
        name: str,
        modelid: str,
        swversion: str,
        sensor_type: str,
        uniqueid: str,
        manufacturername: str,
        state: dict[str, Any] = {},
        config: dict[str, Any] = {},
        recycle: bool = False,
    ) -> dict[str, Any]: ...
    def get_sensor(
        self, sensor_id: int | None = None, parameter: str | None = None
    ) -> dict[str, Any]: ...
    def set_sensor(
        self, sensor_id: int, parameter: str | dict[str, Any], value: Any | None = None
    ) -> list[dict[str, Any]]: ...
    def set_sensor_state(self, sensor_id: int, parameter: str, value: Any) -> None: ...
    def set_sensor_config(self, sensor_id: int, parameter: str, value: Any) -> None: ...
    def set_sensor_content(
        self, sensor_id: int, parameter: str, value: Any, structure: str = "state"
    ) -> None: ...
    def delete_scene(self, scene_id: str) -> bool: ...
    def delete_sensor(self, sensor_id: int) -> bool: ...
    @property
    def groups(self) -> dict[str, Group]: ...
    def get_group_id_by_name(self, name: str) -> int: ...
    def get_group(
        self, group_id: int | None = None, parameter: str | None = None
    ) -> dict[str, Any]: ...
    def set_group(
        self,
        group_id: int,
        parameter: str | dict[str, Any],
        value: Any | None = None,
        transitiontime: int | None = None,
    ) -> list[dict[str, Any]]: ...
    def create_group(self, name: str, lights: list[str] | None = None) -> dict[str, Any]: ...
    def delete_group(self, group_id: int) -> bool: ...
    @property
    def scenes(self) -> dict[str, Scene]: ...
    def get_scene(self) -> dict[str, Scene]: ...
    def activate_scene(self, group_id: int, scene_id: str, transition_time: int = 4) -> None: ...
    def run_scene(self, group_name: str, scene_name: str, transition_time: int = 4) -> None: ...
    def get_schedule(
        self, schedule_id: int | None = None, parameter: str | None = None
    ) -> dict[str, Any]: ...
    def create_schedule(
        self, name: str, time: str, light_id: int, data: dict[str, Any], description: str = " "
    ) -> dict[str, Any]: ...
    def set_schedule_attributes(
        self, schedule_id: int, attributes: dict[str, Any]
    ) -> list[dict[str, Any]]: ...
    def create_group_schedule(
        self, name: str, time: str, group_id: int, data: dict[str, Any], description: str = " "
    ) -> dict[str, Any]: ...
    def delete_schedule(self, schedule_id: int) -> bool: ...
