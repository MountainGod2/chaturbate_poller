chaturbate_poller.utils.format_messages
=======================================

.. py:module:: chaturbate_poller.utils.format_messages

.. autoapi-nested-parse::

   Module to format different types of events from Chaturbate.



Attributes
----------

.. autoapisummary::

   chaturbate_poller.utils.format_messages.EVENT_FORMATTERS


Classes
-------

.. autoapisummary::

   chaturbate_poller.utils.format_messages.EventMethod


Functions
---------

.. autoapisummary::

   chaturbate_poller.utils.format_messages.format_broadcast_event
   chaturbate_poller.utils.format_messages.format_media_purchase_event
   chaturbate_poller.utils.format_messages.format_message
   chaturbate_poller.utils.format_messages.format_message_event
   chaturbate_poller.utils.format_messages.format_room_subject_change_event
   chaturbate_poller.utils.format_messages.format_tip_event
   chaturbate_poller.utils.format_messages.format_user_event


Module Contents
---------------

.. py:class:: EventMethod

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Enum for event methods.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: BROADCAST_START
      :value: 'broadcastStart'



   .. py:attribute:: BROADCAST_STOP
      :value: 'broadcastStop'



   .. py:attribute:: CHAT_MESSAGE
      :value: 'chatMessage'



   .. py:attribute:: FANCLUB_JOIN
      :value: 'fanclubJoin'



   .. py:attribute:: FOLLOW
      :value: 'follow'



   .. py:attribute:: MEDIA_PURCHASE
      :value: 'mediaPurchase'



   .. py:attribute:: PRIVATE_MESSAGE
      :value: 'privateMessage'



   .. py:attribute:: ROOM_SUBJECT_CHANGE
      :value: 'roomSubjectChange'



   .. py:attribute:: TIP
      :value: 'tip'



   .. py:attribute:: UNFOLLOW
      :value: 'unfollow'



   .. py:attribute:: USER_ENTER
      :value: 'userEnter'



   .. py:attribute:: USER_LEAVE
      :value: 'userLeave'



.. py:function:: format_broadcast_event(event: chaturbate_poller.models.event.Event) -> str | None

   Format broadcast start/stop events.

   :param event: The event object to format.
   :type event: Event

   :returns: The formatted message or None if unrecognized.
   :rtype: str | None


.. py:function:: format_media_purchase_event(event: chaturbate_poller.models.event.Event) -> str | None

   Format media purchase events.

   :param event: The event object to format.
   :type event: Event

   :returns: The formatted message or None if unrecognized.
   :rtype: str | None


.. py:function:: format_message(event: chaturbate_poller.models.event.Event) -> str | None

   Format a message for a given Chaturbate event.


.. py:function:: format_message_event(event: chaturbate_poller.models.event.Event) -> str | None

   Format chat or private message events.

   :param event: The event object to format.
   :type event: Event

   :returns: The formatted message or None if unrecognized.
   :rtype: str | None


.. py:function:: format_room_subject_change_event(event: chaturbate_poller.models.event.Event) -> str | None

   Format room subject change events.

   :param event: The event object to format.
   :type event: Event

   :returns: The formatted message or None if unrecognized.
   :rtype: str | None


.. py:function:: format_tip_event(event: chaturbate_poller.models.event.Event) -> str | None

   Format tip events.

   :param event: The event object to format.
   :type event: Event

   :returns: The formatted message or None if unrecognized.
   :rtype: str | None


.. py:function:: format_user_event(event: chaturbate_poller.models.event.Event) -> str | None

   Format user-related events.

   :param event: The event object to format.
   :type event: Event

   :returns: The formatted message or None if unrecognized.
   :rtype: str | None


.. py:data:: EVENT_FORMATTERS
   :type:  dict[str, Callable[[chaturbate_poller.models.event.Event], str | None]]

