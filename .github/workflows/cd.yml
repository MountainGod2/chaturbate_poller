# Streamlined Continuous Deployment Pipeline
name: CD

on:
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types: [completed]
  workflow_dispatch:
    inputs:
      force_release:
        description: "Force release (semantic-release version --force-level)"
        type: choice
        options: ["", "patch", "minor", "major"]
        default: ""
      skip_tests:
        description: "Skip pre-release validation (dangerous)"
        type: boolean
        default: false

env:
  DEFAULT_PYTHON: "3.13"
  UV_CACHE_DIR: /tmp/uv-cache
  FORCE_COLOR: "1"
  PYTHONUNBUFFERED: "1"

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  # Validate prerequisites for release
  validate:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-24.04
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      current-version: ${{ steps.check.outputs.current-version }}
      next-version: ${{ steps.check.outputs.next-version }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || github.token }}

      - name: Setup UV & Python
        uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v4.2.0
        with:
          enable-cache: true
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Install Dependencies
        run: uv sync --group=dev

      - name: Check Release with Semantic Release
        id: check
        run: |
          # Get current version
          current_version=$(uv run python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(data['project']['version'])
          ")
          echo "current-version=$current_version" >> $GITHUB_OUTPUT

          # Check if semantic-release would make a release
          force_flag=""
          if [[ -n "${{ github.event.inputs.force_release }}" ]]; then
            force_flag="--force-level ${{ github.event.inputs.force_release }}"
          fi

          # Run semantic-release in noop mode to check what would happen
          output=$(uv run semantic-release --noop version $force_flag 2>&1 || true)
          echo "Semantic release output:"
          echo "$output"

          if echo "$output" | grep -q "No release will be made"; then
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "next-version=$current_version" >> $GITHUB_OUTPUT
          else
            echo "should-release=true" >> $GITHUB_OUTPUT
            # Extract the next version from semantic-release output
            next_version=$(echo "$output" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+" | tail -1 || echo "$current_version")
            echo "next-version=$next_version" >> $GITHUB_OUTPUT
          fi

          echo "Current version: $current_version"
          echo "Should release: $(if echo "$output" | grep -q "No release will be made"; then echo "false"; else echo "true"; fi)"

  # Quick validation run (lighter than full CI)
  pre-release-check:
    if: ${{ needs.validate.outputs.should-release == 'true' && github.event.inputs.skip_tests == false }}
    needs: validate
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup UV & Python
        uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v4.2.0
        with:
          enable-cache: true
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Install Dependencies
        run: uv sync --group=dev

      - name: Run Tests
        run: |
          echo "::group::Running Tests"
          uv run pytest --junit-xml=test-results.xml -n auto --maxfail=5
          echo "::endgroup::"

      - name: Run Linting
        run: |
          echo "::group::Ruff Format Check"
          uv run ruff format --check --diff src/ tests/
          echo "::endgroup::"

          echo "::group::Ruff Lint Check"
          uv run ruff check src/ tests/
          echo "::endgroup::"

      - name: Upload Pre-release Artifacts
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: pre-release-results-${{ github.run_id }}
          path: |
            test-results.xml
          if-no-files-found: ignore
          retention-days: 30

  # Create and publish release
  release:
    if: ${{ always() && needs.validate.outputs.should-release == 'true' && (inputs.skip_tests || needs['pre-release-check'].result == 'success' || needs['pre-release-check'].result == 'skipped') }}
    needs: [validate, pre-release-check]
    runs-on: ubuntu-24.04
    outputs:
      upload-url: ${{ steps.semantic.outputs.upload_url }}
      tag-name: ${{ steps.semantic.outputs.tag }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || github.token }}

      - name: Setup UV & Python
        uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v4.2.0
        with:
          enable-cache: true
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Install Dependencies
        run: uv sync --group=dev

      - name: Setup Git User
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Run Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT || github.token }}
        run: |
          force_flag=""
          if [[ -n "${{ github.event.inputs.force_release }}" ]]; then
            force_flag="--force-level ${{ github.event.inputs.force_release }}"
          fi

          # Run semantic-release to update version, create tags, and generate release
          output=$(uv run semantic-release version $force_flag 2>&1)
          echo "Semantic release output:"
          echo "$output"

          # Extract the tag name from git
          tag_name=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
          echo "tag=$tag_name" >> $GITHUB_OUTPUT

          if [[ -n "$tag_name" ]]; then
            echo "✅ Release created with tag: $tag_name"
          else
            echo "❌ No tag created, release may have failed"
            exit 1
          fi

  # Publish to PyPI
  publish-pypi:
    if: needs.validate.outputs.should-release == 'true'
    needs: [validate, release]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: "${{ needs.release.outputs.tag-name }}"

      - name: Setup UV & Python
        uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v4.2.0
        with:
          enable-cache: true
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Build Package
        run: uv build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
          print-hash: true
          # Uses trusted publishing - no token needed

  # Final status
  status:
    if: always()
    needs: [validate, release, publish-pypi]
    runs-on: ubuntu-24.04
    steps:
      - name: Release Status
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Should Release:** ${{ needs.validate.outputs.should-release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Current Version:** ${{ needs.validate.outputs.current-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Next Version:** ${{ needs.validate.outputs.next-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created:** ${{ needs.release.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Status:** ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI Status:** ${{ needs.publish-pypi.result }}" >> $GITHUB_STEP_SUMMARY
