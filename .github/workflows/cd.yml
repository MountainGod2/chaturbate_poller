name: Release & Publish

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main]
    types:
      - completed

env:
  UV_CACHE_DIR: /tmp/.uv-cache
  PYTHON_VERSION: "3.13"

permissions:
  contents: read

concurrency:
  group: release-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-workflow:
    name: Validate Prerequisites
    runs-on: ubuntu-24.04
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Validate Workflow Run
        id: check
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should-release=true" >> "$GITHUB_OUTPUT"
          else
            echo "should-release=false" >> "$GITHUB_OUTPUT"
          fi

  release:
    name: Semantic Release + Publish
    needs: validate-workflow
    runs-on: ubuntu-24.04
    if: needs.validate-workflow.outputs.should-release == 'true'
    permissions:
      id-token: write # For OIDC authentication with PyPI
      contents: write # For creating releases
      packages: write # For publishing packages
      attestations: write # For attestations

    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
          persist-credentials: false

      - name: Ensure Branch Integrity
        shell: bash
        run: |
          git reset --hard ${{ github.sha }}

          # Determine upstream branch (useful for avoiding conflicts)
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              echo "::error::Unable to determine upstream branch!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              echo "::error::Unable to determine upstream sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              echo "::error::Upstream has changed. Aborting release."
              exit 1
          fi

      - name: Set Up UV
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Verify Environment
        run: |
          echo "Python version: $(python --version)"
          echo "UV version: $(uv --version)"
          echo "Working directory: $(pwd)"
          echo "Git status: $(git status --porcelain)"

      - name: Install Dependencies
        run: uv sync

      - name: Run Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@1a324000f2251a9e722e77b128bf72712653813f # v10
        with:
          github_token: ${{ secrets.GH_PAT }}

      - name: Publish to TestPyPI
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          attestations: false

      - name: Verify Install from TestPyPI with Retry
        if: steps.release.outputs.released == 'true'
        run: |
          MAX_ATTEMPTS=20
          SLEEP_TIME=30

          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $attempt/$MAX_ATTEMPTS: Checking TestPyPI availability..."

            # Check if package exists on TestPyPI
            if curl -s "https://test.pypi.org/pypi/chaturbate-poller/${{ steps.release.outputs.version }}/json" | grep -q "\"version\""; then
              echo "Package found on TestPyPI, attempting installation..."

              if uv pip install -n --index-url https://test.pypi.org/simple/ chaturbate-poller==${{ steps.release.outputs.version }}; then
                echo "Successfully installed package"
                uv run chaturbate_poller --version
                exit 0
              else
                echo "Installation failed, retrying..."
              fi
            else
              echo "Package not yet available on TestPyPI..."
            fi

            if [ $attempt -lt $MAX_ATTEMPTS ]; then
              echo "Waiting ${SLEEP_TIME} seconds before retry..."
              sleep $SLEEP_TIME
            fi
          done

          echo "Failed to install package after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Publish to PyPI
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

      - name: Publish GitHub Release
        if: steps.release.outputs.released == 'true'
        uses: python-semantic-release/publish-action@e5e3010f6a207cd5d6f5d3dccedbea355484ca02 # v10
        with:
          github_token: ${{ secrets.GH_PAT }}

      - name: Attest Package Provenance
        if: steps.release.outputs.released == 'true'
        uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd # v2
        with:
          subject-path: |
            ${{ github.workspace }}/dist/chaturbate_poller-*.*.*.tar.gz,
            ${{ github.workspace }}/dist/chaturbate_poller-*.*.*-py3-none-any.whl
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Summary
        if: steps.release.outputs.released == 'true'
        run: |
          echo "## New Release: v${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Successfully released and published version ${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[PyPI Package](https://pypi.org/project/chaturbate-poller)" >> $GITHUB_STEP_SUMMARY
          echo "[Release Notes](https://github.com/mountaingod2/chaturbate_poller/releases/tag/v${{ steps.release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
