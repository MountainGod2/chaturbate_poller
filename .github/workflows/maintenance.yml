# Repository Maintenance & Administrative Operations
name: Maintenance

on:
  schedule:
    - cron: '30 1 * * *'  # Daily stale management at 1:30 UTC
    - cron: "0 4 * * 1"   # Weekly dependency updates on Mondays at 4 AM UTC
  workflow_dispatch:
    inputs:
      operation:
        description: 'Maintenance operation to perform'
        required: true
        type: choice
        options:
          - 'stale-management'
          - 'dependency-update'
          - 'cleanup-artifacts'
        default: 'stale-management'
      dry_run:
        description: 'Perform a dry run (no actual changes)'
        type: boolean
        default: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

concurrency:
  group: maintenance-${{ github.event.inputs.operation || 'scheduled' }}
  cancel-in-progress: false

jobs:
  # Stale issue and PR management
  stale-management:
    if: github.event.schedule == '30 1 * * *' || github.event.inputs.operation == 'stale-management' || github.event.inputs.operation == ''
    runs-on: ubuntu-24.04
    steps:
      - name: Mark Stale Issues and PRs
        uses: actions/stale@5bef64f19d7facfb25b37b414482c7164d639639 # v9.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: ${{ github.event.inputs.dry_run || false }}

          # Issue configuration
          stale-issue-message: |
            This issue has been automatically marked as stale because it has not had recent activity for 60 days.

            **What happens next?**
            - This issue will be closed in 7 days if no further activity occurs
            - To keep this issue open, simply comment on it or update it
            - If you believe this was marked as stale in error, please comment and we'll review it

            Thank you for your contributions!
          stale-issue-label: 'stale'
          days-before-issue-stale: 60
          days-before-issue-close: 7
          close-issue-message: |
            This issue was automatically closed due to inactivity.

            If this issue is still relevant, please feel free to reopen it or create a new issue with updated information.
          exempt-issue-labels: 'bug,security,enhancement,documentation,good first issue,help wanted,priority/high,priority/critical'

          # Pull request configuration
          stale-pr-message: |
            This pull request has been automatically marked as stale because it has not had recent activity for 30 days.

            **What happens next?**
            - This PR will be closed in 14 days if no further activity occurs
            - To keep this PR open, simply comment on it, update it, or request a review
            - If you believe this was marked as stale in error, please comment and we'll review it

            Thank you for your contributions!
          stale-pr-label: 'stale'
          days-before-pr-stale: 30
          days-before-pr-close: 14
          close-pr-message: |
            This pull request was automatically closed due to inactivity.

            If you'd like to continue with these changes, please feel free to reopen this PR or create a new one.
          exempt-pr-labels: 'bug,security,enhancement,priority/high,priority/critical,work-in-progress'

  # Dependency updates and security audits
  dependency-update:
    if: github.event.schedule == '0 4 * * 1' || github.event.inputs.operation == 'dependency-update'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GH_PAT || github.token }}

      - name: Setup UV & Python
        uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v4.2.0
        with:
          enable-cache: true
          python-version: "3.13"

      - name: Update Dependencies
        run: |
          echo "::group::Current Dependencies"
          uv tree
          echo "::endgroup::"

          echo "::group::Updating Dependencies"
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "Dry run mode - would update dependencies"
            uv sync --upgrade --dry-run
          else
            uv sync --upgrade
          fi
          echo "::endgroup::"

      - name: Security Audit
        run: |
          echo "::group::Security Audit"
          uv run --with pip-audit pip-audit --format=json --output=audit-report.json || echo "Audit completed with warnings"
          uv run --with safety safety check --output=json --save-json safety-report.json || echo "Safety check completed with warnings"
          echo "::endgroup::"

      - name: Create Pull Request
        if: github.event.inputs.dry_run != 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT || github.token }}
          branch: automated/dependency-updates
          title: "Automated dependency updates"
          body: |
            ## Automated Dependency Updates

            This PR contains automated dependency updates performed by the maintenance workflow.

            ### Changes
            - Updated dependencies to latest compatible versions
            - Performed security audit

            ### Security Report
            - Pip-audit: See `audit-report.json`
            - Safety: See `safety-report.json`

            **Please review the changes and run tests before merging.**
          commit-message: "chore: update dependencies"

  # Cleanup artifacts
  cleanup-artifacts:
    if: github.event.inputs.operation == 'cleanup-artifacts'
    runs-on: ubuntu-24.04
    steps:
      - name: Cleanup Old Artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT || github.token }}
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30); // Keep artifacts for 30 days

            let deletedCount = 0;

            for (const artifact of artifacts.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate) {
                if ('${{ github.event.inputs.dry_run }}' === 'true') {
                  console.log(`Would delete artifact: ${artifact.name} (${artifact.created_at})`);
                } else {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  console.log(`Deleted artifact: ${artifact.name}`);
                  deletedCount++;
                }
              }
            }

            console.log(`Cleaned up ${deletedCount} old artifacts`);
