name: Maintenance & Cleanup

on:
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Mondays at 3 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-24.04
    steps:
      - name: Delete Old Artifacts
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30); // Keep artifacts for 30 days

            for (const artifact of artifacts.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name} (${artifact.id})`);
              }
            }

  cleanup-packages:
    name: Cleanup Old Packages
    runs-on: ubuntu-24.04
    steps:
      - name: Delete Untagged Container Images
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5
        with:
          package-name: chaturbate_poller
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true

  update-dependencies:
    name: Update Dependencies Check
    runs-on: ubuntu-24.04
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Set up UV & Python
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6
        with:
          enable-cache: true
          python-version: "3.13"

      - name: Check for Updates
        id: updates
        run: |
          uv sync
          if uv pip list --outdated | grep -q .; then
            echo "updates_available=true" >> "$GITHUB_OUTPUT"
            uv pip list --outdated > outdated.txt
          else
            echo "updates_available=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Issue for Updates
        if: steps.updates.outputs.updates_available == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs');
            const outdated = fs.readFileSync('outdated.txt', 'utf8');

            const title = 'Automated: Dependency Updates Available';
            const body = `## Outdated Dependencies

            The following dependencies have updates available:

            \`\`\`
            ${outdated}
            \`\`\`

            Please review and update as appropriate.

            > This issue was automatically created by the maintenance workflow.`;

            // Check if issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependencies', 'automated'],
              state: 'open'
            });

            const existingIssue = issues.find(issue => issue.title === title);

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dependencies', 'automated', 'maintenance']
              });
            }

  repository-health:
    name: Repository Health Check
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Check Repository Health
        run: |
          echo "## Repository Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for required files
          files=("README.md" "LICENSE" "pyproject.toml" ".gitignore" "CHANGELOG.md")
          for file in "${files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "✅ $file exists" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ $file missing" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- Python files: $(find src -name '*.py' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Test files: $(find tests -name 'test_*.py' 2>/dev/null | wc -l || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- Total lines: $(find src -name '*.py' -exec wc -l {} + | tail -1 | awk '{print $1}' || echo 0)" >> $GITHUB_STEP_SUMMARY
