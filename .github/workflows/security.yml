name: Security & Dependencies

on:
  schedule:
    - cron: "0 2 * * 1" # Weekly
  workflow_dispatch:
  pull_request:
    paths: ['uv.lock', 'pyproject.toml']

env:
  DEFAULT_PYTHON: "3.13"
  UV_CACHE_DIR: /tmp/uv-cache
  FORCE_COLOR: "1"
  UV_COMPILE_BYTECODE: "1"
  UV_CACHE_COMPRESSION: "1"
  UV_CONCURRENT_DOWNLOADS: "4"

permissions:
  security-events: write
  contents: read
  actions: write
  pull-requests: write

jobs:
  secrets-scan:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7 # v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dependency-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Dependency Review
        uses: actions/dependency-review-action@da24556b548a50705dd671f47852072ea4c105d9 # v4
        with:
          fail-on-severity: high
          comment-summary-in-pr: true

  dependency-audit:
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup UV & Python
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6
        with:
          enable-cache: true
          cache-suffix: audit-${{ env.DEFAULT_PYTHON }}-${{ runner.os }}
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache-dependency-glob: |
            uv.lock
            pyproject.toml
          cache-local-path: ${{ env.UV_CACHE_DIR }}

      - name: Install Dependencies
        run: |
          export UV_CACHE_DIR="${{ env.UV_CACHE_DIR }}"
          uv sync --group=dev --frozen

      - name: Run Security Audit
        run: |
          echo "Running pip-audit security scan..."
          uv run --with pip-audit pip-audit --format=sarif --output=audit.sarif --progress-spinner=off || {
            echo "pip-audit failed, creating empty SARIF file"
            echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "pip-audit"}}, "results": []}]}' > audit.sarif
          }
          if [ -f "audit.sarif" ]; then
            echo "audit.sarif created successfully"
            echo "File size: $(wc -c < audit.sarif) bytes"
          else
            echo "WARNING: audit.sarif was not created"
          fi

      - name: Upload SARIF file
        if: hashFiles('audit.sarif') != ''
        uses: github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3
        with:
          sarif_file: audit.sarif
          category: pip-audit

  sbom-generation:
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup UV & Python
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6
        with:
          enable-cache: true
          cache-suffix: sbom-${{ env.DEFAULT_PYTHON }}-${{ runner.os }}
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache-dependency-glob: |
            uv.lock
            pyproject.toml
          cache-local-path: ${{ env.UV_CACHE_DIR }}

      - name: Install Dependencies
        run: |
          export UV_CACHE_DIR="${{ env.UV_CACHE_DIR }}"
          uv sync --group=dev --frozen

      - name: Generate SBOM
        run: uv run --with pip-audit pip-audit --format=cyclonedx-json --output=sbom.json

      - name: Upload SBOM Artifact
        if: hashFiles('sbom.json') != ''
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: sbom
          path: sbom.json
