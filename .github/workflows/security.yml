# Security Analysis Pipeline
name: Security

on:
  schedule:
    - cron: "0 2 * * 1" # Weekly security scans
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Type of security scan"
        type: choice
        options: ["all", "secrets", "dependencies", "code", "sbom"]
        default: "all"
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'pyproject.toml'
      - 'uv.lock'

permissions:
  security-events: write
  contents: read
  actions: read

env:
  DEFAULT_PYTHON: "3.13"
  UV_CACHE_DIR: /tmp/uv-cache
  FORCE_COLOR: "1"

jobs:
  # Secret scanning with Gitleaks
  secrets:
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@cb7149fd89b9056e23c3ccb20e61ce0a56c95952 # v2.3.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Dependency vulnerability scanning
  dependencies:
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch'
    uses: ./.github/workflows/_shared-build-test.yml
    with:
      python-version: '3.13'
      install-groups: 'dev'
      artifact-suffix: 'dependencies'
      extra-commands: |
        echo "::group::Dependency Vulnerability Scan"
        uv run --with pip-audit pip-audit --format=sarif --output=dependencies.sarif --progress-spinner=off || {
          echo "pip-audit failed, creating minimal SARIF file"
          echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "pip-audit"}}, "results": []}]}' > dependencies.sarif
        }
        echo "::endgroup::"

        echo "::group::Safety Check"
        uv run --with safety safety check --output=json --save-json safety-report.json || {
          echo "safety check completed with warnings"
          echo '{"vulnerabilities": []}' > safety-report.json
        }
        echo "::endgroup::"

  # Code security analysis
  code-security:
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup UV & Python
        uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v4.2.0
        with:
          enable-cache: true
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Install Dependencies
        run: uv sync --group=dev

      - name: Initialize CodeQL
        uses: github/codeql-action/init@4f3212b61783c3c68e8309a0f18a699764811cda # v3.27.1
        with:
          languages: python
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@4f3212b61783c3c68e8309a0f18a699764811cda # v3.27.1
        with:
          category: code-security

      - name: Run Bandit
        run: |
          echo "::group::Bandit Security Scan"
          uv run bandit -r src/ -f sarif -o bandit.sarif -c pyproject.toml || echo "Bandit completed with warnings"
          echo "::endgroup::"

      - name: Run Semgrep
        uses: semgrep/semgrep-action@8b72d1c5c84633bbf0daf7d1d1976ee53b10b2c7 # v1.104.0
        with:
          config: auto
          generateSarif: "1"

      - name: Upload Security Results
        if: always()
        uses: github/codeql-action/upload-sarif@4f3212b61783c3c68e8309a0f18a699764811cda # v3.27.1
        with:
          sarif_file: |
            bandit.sarif
            semgrep.sarif
          category: code-analysis

  # Generate Software Bill of Materials
  sbom:
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'sbom' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup UV & Python
        uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v4.2.0
        with:
          enable-cache: true
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Install Dependencies
        run: uv sync --group=dev

      - name: Generate SBOM
        run: |
          echo "::group::Generate SBOM with pip-audit"
          uv run --with pip-audit pip-audit --format=cyclonedx-json --output=sbom.json --progress-spinner=off
          echo "::endgroup::"

          echo "::group::Generate dependency tree"
          uv tree --depth=10 > dependency-tree.txt || echo "Could not generate dependency tree"
          echo "::endgroup::"

          echo "::group::Generate requirements export"
          uv export --format=requirements-txt --output-file=requirements-export.txt
          echo "::endgroup::"

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: sbom-${{ github.run_id }}
          path: |
            sbom.json
            dependency-tree.txt
            requirements-export.txt
          retention-days: 90

  # Upload consolidated security results
  upload-results:
    if: always()
    needs: [dependencies, code-security]
    runs-on: ubuntu-24.04
    steps:
      - name: Download Security Artifacts
        if: needs.dependencies.result == 'success' || needs.dependencies.result == 'failure'
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.dependencies.outputs.artifact-name }}
          path: security-results/
        continue-on-error: true

      - name: Upload Dependency Security Results
        if: hashFiles('security-results/dependencies.sarif') != ''
        uses: github/codeql-action/upload-sarif@4f3212b61783c3c68e8309a0f18a699764811cda # v3.27.1
        with:
          sarif_file: security-results/dependencies.sarif
          category: dependency-vulnerabilities

  # Security summary and reporting
  summary:
    if: always()
    needs: [secrets, dependencies, code-security, sbom]
    runs-on: ubuntu-24.04
    steps:
      - name: Security Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Secrets Scan:** ${{ needs.secrets.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dependencies Scan:** ${{ needs.dependencies.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Code Security:** ${{ needs.code-security.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "**SBOM Generation:** ${{ needs.sbom.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [[ "${{ needs.secrets.result }}" == "failure" || "${{ needs.dependencies.result }}" == "failure" || "${{ needs.code-security.result }}" == "failure" ]]; then
            echo "**Overall Status:** ❌ Security issues detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Overall Status:** ✅ No critical security issues found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Review the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY
