---
name: Chaturbate Poller CI/CD Pipeline
on:
  workflow_dispatch: null
  schedule:
    - cron: 0 10 * * *
  push:
    branches:
      - main
    tags:
      - v**
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  merge_group: null
env:
  UV_CACHE_DIR: /tmp/uv-cache
  IMAGE_NAME: ghcr.io/mountaingod2/chaturbate_poller
jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          comment-summary-in-pr: true

  ci:
    name: CI - Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version:
          - 3.11
          - 3.12
          - 3.13
        os:
          - ubuntu-24.04
          - macos-latest
          - windows-latest
      fail-fast: true
    timeout-minutes: 20
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set Up UV Environment
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Cache UV Dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ matrix.python-version }}-${{ matrix.os }}-${{ hashFiles('uv.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-${{ matrix.python-version }}-${{ matrix.os }}
            uv-${{ matrix.python-version }}-
      - name: Install and Sync Dependencies
        run: uv sync --all-extras
      - name: Run Ruff Formatting
        run: uv run ruff format ./
      - name: Run Ruff Checks
        run: uv run ruff check --fix ./
      - name: Run MyPy Static Typing Checks
        run: uv run mypy ./
      - name: Run Pylint Linting
        run: uv run pylint ./
      - name: Run Bandit Security Checks
        run: uv run bandit -c pyproject.toml -r ./
      - name: Check for vulnerable dependencies
        run: uv run pip-audit
      - name: Run Unit Tests with Pytest
        run: uv run pytest ./
      - name: Scan Codebase with SonarCloud
        if: matrix.python-version == '3.13' && matrix.os == 'ubuntu-24.04'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Initialize CodeQL
        if: matrix.python-version == '3.13' && matrix.os == 'ubuntu-24.04'
        uses: github/codeql-action/init@v3
        with:
          languages: python
          build-mode: none
      - name: Perform CodeQL Analysis
        if: matrix.python-version == '3.13' && matrix.os == 'ubuntu-24.04'
        uses: github/codeql-action/analyze@v3
        with:
          category: /language:python
      - name: Build Documentation
        run: uv run -m sphinx docs -T -E -a -j auto -b html -D language=en
          docs/_build/html
      - name: Deploy Documentation to GitHub Pages
        if: matrix.python-version == '3.13' && matrix.os == 'ubuntu-24.04' && github.event_name == 'push' && github.ref
          == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html
      - name: Upload Test Coverage Report to Codecov
        if: matrix.python-version == '3.13' && matrix.os == 'ubuntu-24.04' && github.event_name == 'push' && github.ref
          == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
      - name: Upload Test Results to Codecov
        if: failure() && matrix.python-version == '3.13' && matrix.os == 'ubuntu-24.04' && github.event_name == 'push'
          && github.ref == 'refs/heads/main'
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  cd:
    name: Release Deployment
    runs-on: ubuntu-24.04
    needs: ci
    if: |
      success() &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: write
      packages: write
      attestations: write
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    concurrency:
      group: release-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false
    timeout-minutes: 30
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}
          token: ${{ secrets.GH_PAT }}
          persist-credentials: false
      - name: Ensure Correct Release Branch
        run: |
          git reset --hard ${{ github.sha }}
      - name: Verify upstream hasn't changed
        # Last chance to abort before causing an error as another PR/push was applied to
        # the upstream branch while this workflow was running. This is important
        # because we are committing a version change (--commit).
        shell: bash
        run: |
          set +o pipefail

          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"

          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."
      - name: Set Up UV Environment
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Install Dependencies
        run: uv sync
      - name: Run Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9
        with:
          github_token: ${{ secrets.GH_PAT }}
      - name: Publish to TestPyPI
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          attestations: false
      - name: Test Install from TestPyPI
        if: steps.release.outputs.released == 'true'
        run: |
          # Create a test venv for installation verification
          uv venv --python=python3.13 .venv-test
          source .venv-test/bin/activate
          uv pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple chaturbate-poller
          python -c "import chaturbate_poller; print(f'Successfully installed version {chaturbate_poller.__version__}')"
      - name: Publish to PyPI
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Publish Release to GitHub
        if: steps.release.outputs.released == 'true'
        uses: python-semantic-release/publish-action@v9
        with:
          github_token: ${{ secrets.GH_PAT }}
      - name: Attest Build Provenance
        if: steps.release.outputs.released == 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: >
            ${{ github.workspace }}/dist/chaturbate_poller-*.*.*.tar.gz,
            ${{ github.workspace }}/dist/chaturbate_poller-*.*.*-py3-none-any.whl
          github-token: ${{ secrets.GITHUB_TOKEN }}
          attestation-format: slsa-predicate
          signing-algorithm: ECDSA_P256_SHA256

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-24.04
    needs: ci
    if: |
      success() &&
      (github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      security-events: write
    timeout-minutes: 60
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
      fail-fast: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Generate Docker Build Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/mountaingod2/chaturbate_poller
            docker.io/mountaingod2/chaturbate_poller
          tags: >
            type=schedule,pattern=nightly

            type=semver,pattern={{version}}

            type=semver,pattern={{major}}.{{minor}}

            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
          buildkitd-flags: --debug
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Export Test Image
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: mountaingod2/chaturbate_poller:test
      - name: Test Docker Image
        run: docker run --rm mountaingod2/chaturbate_poller:test --help
      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}-cache-${{ matrix.platform }},mode=max
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}-cache-${{ matrix.platform }}
          provenance: true
          attestations: |
            sbom=true
            provenance=true
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}
      - name: Docker Vulnerability Scan
        uses: aquasecurity/trivy-action@v0.30.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          wait-for-processing: true
          category: trivy
      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          attestation-format: slsa-predicate
          signing-algorithm: ECDSA_P256_SHA256
