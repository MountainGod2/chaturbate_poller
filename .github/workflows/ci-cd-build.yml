name: CI/CD Pipeline
'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true
jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - 3.11
          - 3.12
          - 3.13
        os:
          - ubuntu-latest
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
      - name: Set up UV Environment
        uses: astral-sh/setup-uv@v3.2.0
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Install Dependencies
        run: uv sync
      - name: Lint Code
        run: |
          uv run ruff format ./
          uv run ruff check --fix ./
          uv run mypy ./
          uv run pylint ./
      - name: Run Tests with Coverage
        run: uv run pytest
      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4.6.0
        with:
          token: '${{ secrets.CODECOV_TOKEN }}'
          file: ./coverage.xml
          fail_ci_if_error: true
      - name: Scan with SonarCloud
        uses: SonarSource/sonarcloud-github-action@v3.1.0
        env:
          SONAR_TOKEN: '${{ secrets.SONAR_TOKEN }}'
  cd:
    name: Deployment
    needs: ci
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
      - name: Set up UV Environment
        uses: astral-sh/setup-uv@v3.2.0
        with:
          enable-cache: true
      - name: Run Semantic Release
        uses: python-semantic-release/python-semantic-release@v9.12.0
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
      - name: Build Documentation
        run: uv run --group=docs make clean html --directory docs/
      - name: Upload documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          publish_dir: docs/_build/html
  build:
    name: Docker Build & Push
    needs:
      - ci
      - cd
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: '${{ github.repository_owner }}'
          password: '${{ secrets.GITHUB_TOKEN }}'
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6.9.0
        with:
          push: true
          tags: |
            ghcr.io/mountaingod2/chaturbate_poller:latest
            ghcr.io/mountaingod2/chaturbate_poller:${{ github.sha }}
          labels: >
            org.opencontainers.image.title=ChaturbatePoller

            org.opencontainers.image.description="A poller for the Chaturbate
            event API"

            org.opencontainers.image.url=https://github.com/MountainGod2/chaturbate-poller

            org.opencontainers.image.revision=${{ github.sha }}

            org.opencontainers.image.source=${{ github.repository }}
