# Manual Operations & Administrative Tasks
name: Manual Operations

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - 'force-release'
          - 'rebuild-containers'
          - 'security-scan'
          - 'dependency-update'
          - 'cleanup-packages'
          - 'run-ci'
      target:
        description: 'Target (version, tag, branch, etc.)'
        required: false
        type: string
        default: 'main'
      options:
        description: 'Additional options (JSON format)'
        required: false
        type: string
        default: '{}'

env:
  DEFAULT_PYTHON: "3.13"
  UV_CACHE_DIR: /tmp/uv-cache
  FORCE_COLOR: "1"

permissions:
  contents: write
  packages: write
  security-events: write
  actions: write

concurrency:
  group: manual-ops-${{ github.event.inputs.operation }}
  cancel-in-progress: false

jobs:
  # Validate inputs and permissions
  validate:
    runs-on: ubuntu-24.04
    outputs:
      workflow-id: ${{ steps.determine.outputs.workflow-id }}
      inputs: ${{ steps.determine.outputs.inputs }}
      valid: ${{ steps.determine.outputs.valid }}
    steps:
      - name: Validate Operation
        id: determine
        run: |
          operation="${{ github.event.inputs.operation }}"
          target="${{ github.event.inputs.target }}"
          options="${{ github.event.inputs.options }}"

          echo "Operation: $operation"
          echo "Target: $target"
          echo "Options: $options"

          # Determine workflow and inputs
          case "$operation" in
            force-release)
              workflow_id="cd.yml"
              workflow_inputs="{\"force_release\": \"${target:-auto}\"}"
              ;;
            rebuild-containers)
              workflow_id="container.yml"
              workflow_inputs="{\"tag_suffix\": \"${target:-manual}\"}"
              ;;
            security-scan)
              workflow_id="security.yml"
              workflow_inputs="{\"scan_type\": \"${target:-all}\"}"
              ;;
            dependency-update)
              workflow_id="dependencies.yml"
              workflow_inputs="{}"
              ;;
            run-ci)
              workflow_id="ci.yml"
              workflow_inputs="{}"
              ;;
            cleanup-packages)
              # This will be handled directly, not via workflow dispatch
              workflow_id=""
              workflow_inputs="{}"
              ;;
            *)
              echo "::error::Unknown operation: $operation"
              echo "valid=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac

          echo "workflow-id=$workflow_id" >> $GITHUB_OUTPUT
          echo "inputs=$workflow_inputs" >> $GITHUB_OUTPUT
          echo "valid=true" >> $GITHUB_OUTPUT

  # Dispatch to appropriate workflow
  dispatch:
    needs: validate
    if: needs.validate.outputs.valid == 'true' && needs.validate.outputs.workflow-id != ''
    runs-on: ubuntu-24.04
    steps:
      - name: Trigger Workflow
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GH_PAT || github.token }}
          script: |
            const workflowId = '${{ needs.validate.outputs.workflow-id }}';
            const inputs = JSON.parse('${{ needs.validate.outputs.inputs }}');
            const target = '${{ github.event.inputs.target }}' || 'main';

            console.log(`Triggering workflow: ${workflowId}`);
            console.log(`Target branch/ref: ${target}`);
            console.log(`Inputs:`, inputs);

            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowId,
                ref: target,
                inputs: inputs
              });

              console.log('Workflow dispatch successful:', response.status);
            } catch (error) {
              console.error('Failed to dispatch workflow:', error.message);
              core.setFailed(`Failed to dispatch workflow: ${error.message}`);
            }

  # Handle cleanup operations directly
  cleanup:
    needs: validate
    if: needs.validate.outputs.valid == 'true' && github.event.inputs.operation == 'cleanup-packages'
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    steps:
      - name: Cleanup Container Packages
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5.0.0
        with:
          package-name: chaturbate_poller
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

      - name: Cleanup Summary
        run: |
          echo "## Package Cleanup Completed" >> $GITHUB_STEP_SUMMARY
          echo "- Removed untagged container versions" >> $GITHUB_STEP_SUMMARY
          echo "- Kept the 10 most recent versions" >> $GITHUB_STEP_SUMMARY
          echo "- Package: chaturbate_poller" >> $GITHUB_STEP_SUMMARY

  # Summary of operation
  summary:
    if: always()
    needs: [validate, dispatch, cleanup]
    runs-on: ubuntu-24.04
    steps:
      - name: Operation Summary
        run: |
          echo "## Manual Operation Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Operation:** ${{ github.event.inputs.operation }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** ${{ github.event.inputs.target || 'default' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Validation:** ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event.inputs.operation }}" == "cleanup-packages" ]]; then
            echo "**Cleanup:** ${{ needs.cleanup.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Dispatch:** ${{ needs.dispatch.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
