name: CI/CD Workflow

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  merge_group:

env:
  UV_CACHE_DIR: /tmp/uv-cache

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: CI - Python ${{ matrix.python-version }}
    runs-on: ubuntu-24.04
    concurrency:
      group: ci-${{ github.workflow }}-${{ github.ref }}-${{ matrix.python-version }}
      cancel-in-progress: true
    strategy:
      matrix:
        python-version: [3.11, 3.12, 3.13]
      fail-fast: true
    timeout-minutes: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Up UV Environment
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Cache UV Dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ matrix.python-version }}-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ matrix.python-version }}-${{ runner.os }}

      - name: Install and Sync Dependencies
        run: uv sync --all-extras

      - name: Run Ruff Formatting
        run: uv run ruff format ./

      - name: Run Ruff Checks
        run: uv run ruff check --fix ./

      - name: Run MyPy Static Typing Checks
        run: uv run mypy ./

      - name: Run Pylint Linting
        run: uv run pylint ./

      - name: Run Bandit Security Checks
        run: uv run bandit -c pyproject.toml -r ./

      - name: Run Unit Tests with Pytest
        run: uv run pytest ./

      - name: Scan Codebase with SonarCloud
        if: matrix.python-version == '3.13'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Initialize CodeQL
        if: matrix.python-version == '3.13'
        uses: github/codeql-action/init@v3
        with:
          languages: python
          build-mode: none

      - name: Perform CodeQL Analysis
        if: matrix.python-version == '3.13'
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:python'

      - name: Build Documentation
        run: uv run -m sphinx docs -T -E -a -j auto -b html -D language=en docs/_build/html

      - name: Deploy Documentation to GitHub Pages
        if: matrix.python-version == '3.13' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html

      - name: Upload Test Coverage Report to Codecov
        if: matrix.python-version == '3.13' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true

      - name: Upload Test Results to Codecov
        if: failure() && matrix.python-version == '3.13' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  cd:
    name: Release Deployment
    needs: ci
    runs-on: ubuntu-24.04
    concurrency:
      group: cd-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    permissions:
      id-token: write
      contents: write
      packages: write
      attestations: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Ensure Correct Release Branch
        run: |
          git checkout -B ${{ github.ref_name }} ${{ github.sha }}

      - name: Set Up UV Environment
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Install Dependencies
        run: uv sync

      - name: Run Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9
        with:
          github_token: '${{ secrets.GH_PAT }}'

      - name: Publish to TestPyPI
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          repository-url: 'https://test.pypi.org/legacy/'
          attestations: false

      - name: Test Install from TestPyPI
        if: steps.release.outputs.released == 'true'
        run: uv pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple chaturbate-poller

      - name: Publish to PyPI
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@v1.12.4

      - name: Publish Release to GitHub
        if: steps.release.outputs.released == 'true'
        uses: python-semantic-release/publish-action@v9
        with:
          github_token: '${{ secrets.GH_PAT }}'

      - name: Attest Build Provenance
        if: steps.release.outputs.released == 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            ${{ github.workspace }}/dist/chaturbate_poller-*.*.*.tar.gz,
            ${{ github.workspace }}/dist/chaturbate_poller-*.*.*-py3-none-any.whl
          github-token: ${{ secrets.GITHUB_TOKEN }}
