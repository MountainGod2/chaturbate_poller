name: Docker Build & Publish

on:
  workflow_dispatch:
  schedule:
    - cron: "0 10 * * *" # Daily at 10:00 UTC
  push:
    tags:
      - v**
  merge_group:

env:
  IMAGE_NAME: mountaingod2/chaturbate_poller
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io

permissions:
  contents: read

concurrency:
  group: docker-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker:
    name: Build, Test & Publish Docker Image
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      security-events: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Extract Version
        id: extract_version
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF_NAME}"
            echo "version=${VERSION#v}" >> "$GITHUB_OUTPUT"
            echo "is_release=true" >> "$GITHUB_OUTPUT"
          else
            COMMIT_SHA=$(git rev-parse --short HEAD)
            echo "version=dev-${COMMIT_SHA}" >> "$GITHUB_OUTPUT"
            echo "is_release=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate Metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule,pattern=nightly
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha,format=long,prefix=
          labels: |
            org.opencontainers.image.title=Chaturbate Poller
            org.opencontainers.image.description=Python-based monitoring tool for Chaturbate
            org.opencontainers.image.vendor=MountainGod2
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ steps.extract_version.outputs.version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3
        with:
          driver-opts: network=host
          buildkitd-flags: --debug

      - name: Login to DockerHub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Export Test Image (local)
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Image
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:${{ github.sha }} --help
        timeout-minutes: 5

      - name: Run Security Scan on Test Image
        uses: aquasecurity/trivy-action@76071ef0d7ec797419534a183b498b4d6366cf37 # 0.31.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true

      - name: Build and Push Multi-Platform Image
        id: push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          provenance: true
          cache-from: |
            type=registry,ref=${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }},mode=max
            type=gha,mode=max
          cache-to: |
            type=gha,mode=max
          build-args: |
            BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.extract_version.outputs.version }}

      - name: Upload Trivy Results to Security Tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@ce28f5bb42b7a9f2c824e633a3f6ee835bab6858 # v3
        with:
          sarif_file: trivy-results.sarif
          wait-for-processing: true
          category: trivy-${{ steps.extract_version.outputs.version }}

      - name: Attest Docker Provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        with:
          subject-name: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}

      - name: Delete Untagged Docker Image Versions
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5
        with:
          package-name: chaturbate_poller
          package-type: "container"
          min-versions-to-keep: 0 # Delete all untagged versions
          delete-only-untagged-versions: "true"

      - name: Delete Old Docker Image Versions
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5
        with:
          package-name: chaturbate_poller
          package-type: "container"
          min-versions-to-keep: 100
          # Ignore semver versions and nightly builds (allow commit-tagged versions to be deleted)
          ignore-versions: '^(?:latest|nightly|v?\d+(?:\.\d+)*(?:-.*)??)$'
